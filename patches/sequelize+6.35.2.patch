diff --git a/node_modules/sequelize/lib/dialects/sqlite/connection-manager.js b/node_modules/sequelize/lib/dialects/sqlite/connection-manager.js
index 7fe2c73..b9fed46 100644
--- a/node_modules/sequelize/lib/dialects/sqlite/connection-manager.js
+++ b/node_modules/sequelize/lib/dialects/sqlite/connection-manager.js
@@ -37,6 +37,7 @@ class ConnectionManager extends AbstractConnectionManager {
       options.storage = this.sequelize.options.host || ":memory:";
     }
     options.inMemory = options.storage === ":memory:" ? 1 : 0;
+    const config = this.config;
     const dialectOptions = this.sequelize.options.dialectOptions;
     const defaultReadWriteMode = this.lib.OPEN_READWRITE | this.lib.OPEN_CREATE;
     options.readWriteMode = dialectOptions && dialectOptions.mode || defaultReadWriteMode;
@@ -46,6 +47,7 @@ class ConnectionManager extends AbstractConnectionManager {
     if (!options.inMemory && (options.readWriteMode & this.lib.OPEN_CREATE) !== 0) {
       fs.mkdirSync(path.dirname(options.storage), { recursive: true });
     }
+    await this.sequelize.runHooks('beforeConnect', config);
     const connection = await new Promise((resolve, reject) => {
       this.connections[options.inMemory || options.uuid] = new this.lib.Database(options.storage, options.readWriteMode, (err) => {
         if (err)
@@ -60,6 +62,7 @@ class ConnectionManager extends AbstractConnectionManager {
     if (this.sequelize.options.foreignKeys !== false) {
       connection.run("PRAGMA FOREIGN_KEYS=ON");
     }
+    await this.sequelize.runHooks('afterConnect', connection, config);
     return connection;
   }
   releaseConnection(connection, force) {
